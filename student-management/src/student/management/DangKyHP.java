/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package student.management;

import javax.swing.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author crazy
 */
public class DangKyHP extends javax.swing.JFrame {

    /**
     * Creates new form DangKyHP
     */
    private JButton btn1;

    public DangKyHP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHeader = new javax.swing.JPanel();
        lableBangdiem = new javax.swing.JLabel();
        lableDKHP = new javax.swing.JLabel();
        TabbedPane = new javax.swing.JTabbedPane();
        panelThongTin = new javax.swing.JPanel();
        lblTitle_tbOfferingRegistered = new javax.swing.JLabel();
        Scroll_tbOfferingRegistered = new javax.swing.JScrollPane();
        tbOfferingRegistered = new javax.swing.JTable();
        btnDeleteOffering = new javax.swing.JButton();
        panelDangKyHocPhan = new javax.swing.JPanel();
        ScrollPane_tbBangDangKyHP = new javax.swing.JScrollPane();
        tbBangDangKyHP = new javax.swing.JTable();
        btnDangKy = new javax.swing.JButton();
        lblSuccessNotification = new javax.swing.JLabel();
        lblErrorNotification = new javax.swing.JLabel();
        lblTitle_tbOfferingRegistered1 = new javax.swing.JLabel();
        btn_logout = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        lblStudentID = new javax.swing.JLabel();
        lableFullname = new javax.swing.JLabel();
        lableID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                loadHocPhan_Thongtin(evt);
            }
        });

        panelHeader.setBackground(new java.awt.Color(25, 181, 254));
        panelHeader.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelHeaderFocusGained(evt);
            }
        });
        panelHeader.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panelHeaderComponentResized(evt);
            }
        });
        panelHeader.setLayout(null);

        lableBangdiem.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        lableBangdiem.setForeground(new java.awt.Color(250, 250, 250));
        lableBangdiem.setText("Bảng điểm");
        lableBangdiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lableBangdiemMouseClicked(evt);
            }
        });
        panelHeader.add(lableBangdiem);
        lableBangdiem.setBounds(360, 20, 220, 30);

        lableDKHP.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        lableDKHP.setForeground(new java.awt.Color(250, 250, 250));
        lableDKHP.setText("Đăng Ký Học Phần");
        panelHeader.add(lableDKHP);
        lableDKHP.setBounds(20, 20, 220, 30);

        TabbedPane.setBackground(new java.awt.Color(255, 153, 153));
        TabbedPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                TabbedPaneComponentShown(evt);
            }
        });

        panelThongTin.setBackground(new java.awt.Color(250, 250, 250));

        lblTitle_tbOfferingRegistered.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTitle_tbOfferingRegistered.setText("Học Phần Đã Đăng Ký");

        tbOfferingRegistered.setAutoCreateRowSorter(true);
        tbOfferingRegistered.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Học Phần", "Tên Học Phần", "Giảng Viên", "Học Kỳ", "slot", ""
            }
        ){
            public Class<?> getColumnClass(int column) {
                if (column == 5) {
                    return Boolean.class;
                }else{
                    return String.class;
                }
            }
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Scroll_tbOfferingRegistered.setViewportView(tbOfferingRegistered);

        btnDeleteOffering.setText("Hủy Học Phần");
        btnDeleteOffering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOfferingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelThongTinLayout = new javax.swing.GroupLayout(panelThongTin);
        panelThongTin.setLayout(panelThongTinLayout);
        panelThongTinLayout.setHorizontalGroup(
            panelThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelThongTinLayout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(lblTitle_tbOfferingRegistered, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addGap(336, 336, 336))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelThongTinLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Scroll_tbOfferingRegistered)
                .addGap(43, 43, 43))
            .addGroup(panelThongTinLayout.createSequentialGroup()
                .addGap(374, 374, 374)
                .addComponent(btnDeleteOffering, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelThongTinLayout.setVerticalGroup(
            panelThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelThongTinLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(lblTitle_tbOfferingRegistered)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Scroll_tbOfferingRegistered, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteOffering, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        TabbedPane.addTab("Thông tin", panelThongTin);

        panelDangKyHocPhan.setBackground(new java.awt.Color(250, 250, 250));

        tbBangDangKyHP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Học Phần", "Tên Môn Học", "Giảng viên", "Học Kỳ", "Slot", ""
            }
        ){
            public Class<?> getColumnClass(int column) {
                if (column == 5) {
                    return Boolean.class;
                }else{
                    return String.class;
                }
            }
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPane_tbBangDangKyHP.setViewportView(tbBangDangKyHP);

        btnDangKy.setText("Đăng ký");
        btnDangKy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangKyActionPerformed(evt);
            }
        });

        lblSuccessNotification.setBackground(new java.awt.Color(200, 247, 197));
        lblSuccessNotification.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblSuccessNotification.setForeground(new java.awt.Color(1, 152, 117));
        lblSuccessNotification.setOpaque(true);

        lblErrorNotification.setBackground(new java.awt.Color(235, 151, 78));
        lblErrorNotification.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lblErrorNotification.setForeground(new java.awt.Color(102, 102, 102));
        lblErrorNotification.setOpaque(true);

        lblTitle_tbOfferingRegistered1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTitle_tbOfferingRegistered1.setText("Đăng Ký Học Phần");

        javax.swing.GroupLayout panelDangKyHocPhanLayout = new javax.swing.GroupLayout(panelDangKyHocPhan);
        panelDangKyHocPhan.setLayout(panelDangKyHocPhanLayout);
        panelDangKyHocPhanLayout.setHorizontalGroup(
            panelDangKyHocPhanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDangKyHocPhanLayout.createSequentialGroup()
                .addGap(459, 459, 459)
                .addComponent(btnDangKy, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addGap(297, 297, 297))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDangKyHocPhanLayout.createSequentialGroup()
                .addGap(430, 430, 430)
                .addComponent(lblTitle_tbOfferingRegistered1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(252, 252, 252))
            .addGroup(panelDangKyHocPhanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDangKyHocPhanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblSuccessNotification, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(lblErrorNotification, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ScrollPane_tbBangDangKyHP, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        panelDangKyHocPhanLayout.setVerticalGroup(
            panelDangKyHocPhanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDangKyHocPhanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle_tbOfferingRegistered1)
                .addGap(16, 16, 16)
                .addGroup(panelDangKyHocPhanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane_tbBangDangKyHP, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDangKyHocPhanLayout.createSequentialGroup()
                        .addComponent(lblSuccessNotification)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblErrorNotification)))
                .addGap(30, 30, 30)
                .addComponent(btnDangKy)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Đăng Ký Học Phần", panelDangKyHocPhan);

        btn_logout.setText("Đăng xuất");
        btn_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoutActionPerformed(evt);
            }
        });

        lblName.setText("Họ và Tên:");

        lblStudentID.setText("MSSV: ");

        lableFullname.setText("jLabel1");

        lableID.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane)
            .addComponent(panelHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lableID)
                    .addComponent(lableFullname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_logout)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(lableFullname))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentID)
                            .addComponent(lableID))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        setBounds(0, 0, 921, 707);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteOfferingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOfferingActionPerformed
        System.out.println("delte function");
        connection.connect();
        String offeringID, semester;
        String userID = CONST.currentUserid;
        System.out.println("current user: " + userID);
        System.out.println("table lenght: " + tbOfferingRegistered.getRowCount());
        CallableStatement cstm;
        for (int i = 0; i < tbOfferingRegistered.getRowCount(); i++) {
            Boolean status_Checkbox = (Boolean) tbOfferingRegistered.getModel().getValueAt(i, 5);
            if (status_Checkbox) {
                try {
                    System.out.println("line 316");
                    offeringID = (String) tbOfferingRegistered.getModel().getValueAt(i, 0);
                    semester = (String) tbOfferingRegistered.getModel().getValueAt(i, 3);

                    String stringSQL = "{call DELETE_SUBJECT_REGISTRATION(?,?,?)}";
                    cstm = DBConnection.con.prepareCall(stringSQL);
                    cstm.setString(1, userID);
                    cstm.setString(2, offeringID);
                    cstm.setString(3, semester);
                    cstm.executeQuery();
                    System.out.println("line 326");

                } catch (SQLException e) {

                    System.out.println("loi huy hoc phan " + e);
                }
            }
        }
        connection.disconnect();
        this.prepareUI_panelThongTin();
    }//GEN-LAST:event_btnDeleteOfferingActionPerformed

    private void btnDangKyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangKyActionPerformed

        lblErrorNotification.setText("");
        lblSuccessNotification.setText("");
        connection.connect();
        String ma_offering, semester, PDT_id;
        String errorNotification = "";
        String successNotification = "";
        String userID = CONST.currentUserid;

        CallableStatement callProc;
        for (int i = 0; i < tbBangDangKyHP.getRowCount(); i++) {
            Boolean status_Checkbox = (Boolean) tbBangDangKyHP.getModel().getValueAt(i, 5);

            if (status_Checkbox) {

                ma_offering = (String) tbBangDangKyHP.getModel().getValueAt(i, 0);
                semester = (String) tbBangDangKyHP.getModel().getValueAt(i, 3);
                PDT_id = null;

                try {
                    String stringSQL = "{call INSERT_SUBJECT_REGISTRATION(?,?,?,?)}";

                    callProc = DBConnection.con.prepareCall(stringSQL);
                    callProc.setString(1, userID);
                    callProc.setString(2, PDT_id);
                    callProc.setString(3, ma_offering);
                    callProc.setString(4, semester);
                    callProc.executeQuery();
                    successNotification += ma_offering + "<br>";
                } catch (SQLException e) {

                    System.out.println("loi khi dang ki hoc phan " + e);
                    System.out.println(e.getErrorCode());
                    if (e.getErrorCode() == 20001) {
                        errorNotification += ma_offering + ": Môn này đã được đăng ký. <br>";
                    } else if (e.getErrorCode() == 20000) {
                        errorNotification += ma_offering + ": Không thỏa điều kiện tiên quyết. <br>";
                    } else if (e.getErrorCode() == 20002) {
                        errorNotification += ma_offering + ": Lớp này đã đầy. <br>";
                    }
                }
            }
        }
        if (!errorNotification.equals("")) {
            lblErrorNotification.setText("<html><p style=\"padding:6 8; font-size:11\">Danh sách lớp đăng ký không thành công:<br>" + errorNotification + "</p></html>");
        }
        if (!successNotification.equals("")) {
            lblSuccessNotification.setText("<html><p style=\"padding:6 8; font-size:11\">Danh sách lớp đã đăng ký thành công:<br>" + successNotification + "</p></html>");
        }
        connection.disconnect();
        this.prepareUI_panelThongTin();
        this.prepareUI_panelDangKyHP();

    }//GEN-LAST:event_btnDangKyActionPerformed

    //load view bangdiem
    private void lableBangdiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lableBangdiemMouseClicked

        this.dispose();
        BangDiem scoreTable = new BangDiem();
        scoreTable.setVisible(true);
        scoreTable.prepareGUI_cbSemester();
        String semester = (String) scoreTable.CbSemester.getSelectedItem();
        scoreTable.prepareGUI_tbScore(semester);

    }//GEN-LAST:event_lableBangdiemMouseClicked

    private void panelHeaderComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelHeaderComponentResized

    }//GEN-LAST:event_panelHeaderComponentResized

    private void panelHeaderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelHeaderFocusGained

    }//GEN-LAST:event_panelHeaderFocusGained

    private void TabbedPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_TabbedPaneComponentShown
        System.out.println("iam called");
    }//GEN-LAST:event_TabbedPaneComponentShown

    //load hoc phan
    //load thong tin 
    //load user info
    private void loadHocPhan_Thongtin(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loadHocPhan_Thongtin

        //load user info
        String getUserInfoStringSQL = "select fullname from users where userid = '" + CONST.currentUserid + "'";

        DBConnection connection = new DBConnection();

        connection.connect();

        try {

            ResultSet result = connection.query(getUserInfoStringSQL);

            if (result.next()) {

                lableFullname.setText(result.getString("fullname"));
                lableID.setText(CONST.currentUserid);
            }

        } catch (Exception e) {

            System.out.println("err load user info " + e);
        }

        connection.disconnect();
        
        
        //load hoc phan
        //load thong tin 
        prepareUI_panelDangKyHP();
        prepareUI_panelThongTin();
    }//GEN-LAST:event_loadHocPhan_Thongtin

    private void btn_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoutActionPerformed
        CONST.loginForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_logoutActionPerformed
    public void prepareUI_panelDangKyHP() {
        System.out.println("preparing dkhp");
        model_tbBangDangKyHP = (DefaultTableModel) tbBangDangKyHP.getModel();
        model_tbBangDangKyHP.setRowCount(0);
        try {
            connection.connect();
            String stringSQL = "SELECT offeringID,subjectName,semester,lectureID,slot FROM offering o, subject s WHERE o.SUBJECTID = s.SUBJECTID";
            Statement stmt = DBConnection.con.createStatement();
            ResultSet rs = stmt.executeQuery(stringSQL);
            while (rs.next()) {
                System.out.println("line 377");
                String offeringID = rs.getString(1);
                String subjectID = rs.getString(2);
                String semester = rs.getString(3);
                String lectureID = rs.getString(4);
                int sizes = rs.getInt(5);
                PreparedStatement ps = DBConnection.con.prepareStatement("SELECT COUNT(offeringID) FROM SUBJECT_REGISTRATION WHERE offeringID = ?");
                ps.setString(1, offeringID);
                ResultSet rs2 = ps.executeQuery();
                rs2.next();
                int registered = rs2.getInt(1);
                String slot = registered + "/" + sizes;
                Boolean status = false;
                model_tbBangDangKyHP.addRow(new Object[]{offeringID, subjectID, lectureID, semester, slot, status});
            }
            connection.disconnect();
        } catch (SQLException e) {

            System.out.println("prepare panel dang ky hp err");
            System.out.println(e);
        }
    }

    public void prepareUI_panelThongTin() {
        model_tbOfferingRegistered = (DefaultTableModel) tbOfferingRegistered.getModel();
        model_tbOfferingRegistered.setRowCount(0);
        String userID = CONST.currentUserid;
        try {
            connection.connect();
            String stringSQL = "SELECT o.OfferingID,o.semester,SubjectName,LectureID,Slot FROM SUBJECT_REGISTRATION sr, Offering o, subject s WHERE o.OFFERINGID = sr.OFFERINGID AND o.SUBJECTID = s.SUBJECTID AND sr.REGISTEREDBY = ?";
            PreparedStatement ps = DBConnection.con.prepareStatement(stringSQL);
            //System.out.println(userID);
            ps.setString(1, userID);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String offeringID = rs.getString(1);
                String subjectID = rs.getString(3);
                String semester = rs.getString(2);
                String lectureID = rs.getString(4);
                int slot = rs.getInt(5);
                Boolean status = false;
                model_tbOfferingRegistered.addRow(new Object[]{offeringID, subjectID, lectureID, semester, slot, status});
            }
            connection.disconnect();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DangKyHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DangKyHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DangKyHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DangKyHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                DangKyHP dkhp = new DangKyHP();
//                dkhp.setVisible(true);
//                dkhp.prepareUI_panelDangKyHP();
//                dkhp.prepareUI_panelThongTin();
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane_tbBangDangKyHP;
    private javax.swing.JScrollPane Scroll_tbOfferingRegistered;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JButton btnDangKy;
    private javax.swing.JButton btnDeleteOffering;
    private javax.swing.JButton btn_logout;
    private javax.swing.JLabel lableBangdiem;
    private javax.swing.JLabel lableDKHP;
    private javax.swing.JLabel lableFullname;
    private javax.swing.JLabel lableID;
    private javax.swing.JLabel lblErrorNotification;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStudentID;
    private javax.swing.JLabel lblSuccessNotification;
    private javax.swing.JLabel lblTitle_tbOfferingRegistered;
    private javax.swing.JLabel lblTitle_tbOfferingRegistered1;
    private javax.swing.JPanel panelDangKyHocPhan;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelThongTin;
    private javax.swing.JTable tbBangDangKyHP;
    private javax.swing.JTable tbOfferingRegistered;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel model_tbBangDangKyHP;
    private DefaultTableModel model_tbOfferingRegistered;
    private DBConnection connection = new DBConnection();
}
